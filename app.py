import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import matplotlib.pyplot as plt
import os

# Set up the Streamlit app
st.set_page_config(page_title="FACETECTIVE- Deepfake Detector", layout="wide")

# Load the trained model
model = load_model("models/deepfake_image_model.h5")

# Title
st.title("üïµÔ∏è‚Äç‚ôÇÔ∏è FACETECTIVE-Deepfake Image Detector")

# Responsive Styling
st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        padding: 0.5em 1.2em;
        border-radius: 8px;
    }
    .stProgress > div > div > div > div {
        background-color: #4CAF50;
    }
    </style>
""", unsafe_allow_html=True)

# About section
with st.expander("‚ÑπÔ∏è About This App"):
    st.write("""
        This app uses a deep learning model to detect whether a face image is real or generated by AI.
        It was trained on real vs synthetic (deepfake) image datasets.
    """)

# Upload image
uploaded_file = st.file_uploader("üì∑ Upload a face image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Load image and convert to RGB
    img = Image.open(uploaded_file).convert("RGB")
    img_size = img.size

    st.markdown(f"**Original Image Size:** `{img_size}`")

    # Resize image to model input
    img_resized = img.resize((128, 128))
    img_array = image.img_to_array(img_resized) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict
    prediction = model.predict(img_array)
    class_index = np.argmax(prediction, axis=1)[0]
    confidence = np.max(prediction)
    label = "Real" if class_index == 0 else "Fake"

    # Responsive display
    col1, col2 = st.columns([1, 1])

    with col1:
        st.image(img, caption="Uploaded Image", use_container_width=True)

    with col2:
        st.markdown(f"### üß† Prediction: `{label}`")
        st.progress(int(confidence * 100))
        st.markdown(f"**Confidence:** `{confidence * 100:.2f}%`")

        # Probability bar chart
        fig, ax = plt.subplots(figsize=(4, 2.5))
        ax.bar(["Real", "Fake"], prediction[0], color=["green", "red"])
        ax.set_ylim([0, 1])
        ax.set_ylabel("Probability")
        st.pyplot(fig, use_container_width=True)

